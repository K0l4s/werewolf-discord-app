// handleInteractionCreate.js
const { DEFAULT_EXP_LVL1, STEP_EXP } = require('../config/constants');
const BattleController = require('../controllers/DauLaDaiLuc/battleController');
const SpiritController = require('../controllers/DauLaDaiLuc/spiritController');
const SpiritRingController = require('../controllers/DauLaDaiLuc/spiritRingController');
const GameController = require('../controllers/gameController');
const LanguageController = require('../controllers/languageController');
const MiniGameController = require('../controllers/miniGameController');
const SettingController = require('../controllers/settingController');
const TopController = require('../controllers/topController');
const UserController = require('../controllers/userController');
const SpiritMaster = require('../models/DauLaDaiLuc/SpiritMaster');
const Prefix = require('../models/Prefix');
const GameService = require('../services/gameService');
const { interactionToMessage } = require('../utils/fakeMessage');
const { EmbedBuilder, MessageFlags } = require('discord.js');

module.exports = async (interaction, client) => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName } = interaction;
    let lang = await LanguageController.getLang(interaction.guildId);

    switch (commandName) {
        case 'spirit': {
            await interaction.deferReply();
            if (interaction.options.getSubcommand() === "list") {
                try {
                    const page = interaction.options.getString("pagenumber");
                    const embed = await SpiritController.showAllSpirits(page);
                    return await interaction.editReply({ embeds: [embed] });
                } catch (error) {
                    console.error('L·ªói khi hi·ªÉn th·ªã V≈© H·ªìn:', error);
                    const errorEmbed = new EmbedBuilder()
                        .setTitle('‚ùå L·ªói')
                        .setDescription('ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch V≈© H·ªìn!')
                        .setColor(0xFF0000);
                    return await interaction.editReply({ embeds: [errorEmbed] });
                }
            } else if (interaction.options.getSubcommand() === "information") {
                try {
                    const result = await SpiritController.getSpiritInfo(interaction.user.id);
                    return await interaction.editReply(result);
                } catch (error) {
                    const result = "L·ªói l·∫•y d·ªØ li·ªáu";
                    return await interaction.editReply({ content: result });
                }
            } else if (interaction.options.getSubcommand() === "ring") {
                const userId = interaction.user.id;
                const { embeds, components } = await SpiritRingController.getSpiritRingsEmbed(userId);
                return await interaction.editReply({ embeds, components });
            }
            break;
        }

        case 'top': {
            await interaction.deferReply({ ephemeral: false });
            return await TopController.handleTopCommand(interaction, [], true, client);
        }

        case 'set': {
            await interaction.deferReply();
            if (interaction.options.getSubcommand() === "prefix") {
                const newPrefix = interaction.options.getString("value");
                await Prefix.findOneAndUpdate(
                    { guildId: interaction.guild.id },
                    { prefix: newPrefix },
                    { upsert: true }
                );
                await interaction.editReply(`‚úÖ Prefix server ƒë√£ ƒë·ªïi th√†nh: \`${newPrefix}\``);
                return;
            } else if (interaction.options.getSubcommand() === "notification") {
                const channel = interaction.options.getChannel("channel");
                const channelId = channel.id;
                await SettingController.setNoti(interaction, channelId);
                return;
            }
            break;
        }

        case 'awake': {
            await interaction.deferReply();
            const userId = interaction.user.id;
            console.log("ƒêang ti·∫øn h√†nh th·ª©c t·ªânh v√µ h·ªìn cho user:", userId);

            try {
                const currentCount = await SpiritMaster.countDocuments({ userId });
                console.log("S·ªë spirit hi·ªán t·∫°i:", currentCount);

                const embed = await SpiritController.awakenRandomSpirit(userId);

                if (typeof embed === 'string') {
                    return await interaction.editReply(embed);
                } else if (embed && embed.data) {
                    return await interaction.editReply({ embeds: [embed] });
                } else {
                    console.error("Embed kh√¥ng h·ª£p l·ªá:", embed);
                    return await interaction.editReply("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o embed!");
                }
            } catch (error) {
                console.error("L·ªói khi th·ª©c t·ªânh:", error);
                return await interaction.editReply("‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª©c t·ªânh v≈© h·ªìn!");
            }
        }

        case 'battle': {
            await interaction.deferReply();
            await BattleController.handleBattleCommand(interaction);
            return;
        }

        case 'join': {
            await interaction.deferReply();
            await GameController.handleJoinCommand(interactionToMessage(interaction), lang);
            return;
        }

        case 'new': {
            await interaction.deferReply();
            const embed = await GameController.handleCreateNewRoom(interaction.channel.id, lang);
            await interaction.editReply({ embeds: [embed] });
            return;
        }

        case 'give': {
            await interaction.deferReply();
            const mentionUser = interaction.options.getUser('user');
            const balance = interaction.options.getNumber('amount');
            const embed = new EmbedBuilder();

            if (!mentionUser) {
                embed.setTitle("‚ùå Transfer Error!")
                    .setDescription(`You must mention receiver first!`)
                    .setColor('Red');
                await interaction.editReply({ embeds: [embed] });
                return;
            }

            if (mentionUser.id === interaction.user.id) {
                embed.setTitle("‚ùå Transfer Error!")
                    .setDescription(`You can't send money to yourself!`)
                    .setColor('Red');
                await interaction.editReply({ embeds: [embed] });
                return;
            }

            await UserController.giveMoneyTo(
                interactionToMessage(interaction),
                mentionUser,
                balance
            );
            return;
        }

        case 'baucua': {
            await interaction.deferReply();
            const balance = interaction.options.getNumber('amount');
            return await MiniGameController.bauCua(interaction.user.id, interactionToMessage(interaction), balance);
        }

        case 'help': {
            await interaction.deferReply();
            const commandGroups = {
                werewolf: {
                    name: "Werewolf",
                    description: "C√°c l·ªánh ch∆°i Ma S√≥i",
                    emoji: "üê∫",
                    color: "#8B4513",
                    commands: [
                        { name: "wnew / wn", desc: "T·∫°o ph√≤ng m·ªõi" },
                        { name: "wjoin / wj", desc: "Tham gia ph√≤ng" },
                        { name: "wstart / ws", desc: "B·∫Øt ƒë·∫ßu game" },
                    ]
                },
                soulland: {
                    name: "Soul Land",
                    description: "C√°c l·ªánh ƒê·∫•u La ƒê·∫°i L·ª•c",
                    emoji: "üåå",
                    color: "#9370DB",
                    commands: [
                        { name: "/awake", desc: "Th·ª©c t·ªânh V≈© H·ªìn" },
                        { name: "/spirit list <page>", desc: "Xem danh s√°ch V≈© H·ªìn" },
                        { name: "/spirit information", desc: "Xem chi ti·∫øt V≈© H·ªìn" },
                        { name: "wspirit attach <spiritRef> <ringId>", desc: "Kh·∫£m H·ªìn Ho√†n" },
                        { name: "whunt", desc: "SƒÉn H·ªìn Th√∫ (c√≥ th·ªÉ nh·∫≠n H·ªìn Ho√†n)" },
                        { name: "wbattle <@user> ho·∫∑c /battle <@user>", desc: "Khi√™u chi·∫øn ng∆∞·ªùi kh√°c" },
                    ]
                },
                economy: {
                    name: "Kinh t·∫ø",
                    description: "C√°c l·ªánh li√™n quan ƒë·∫øn ti·ªÅn t·ªá",
                    emoji: "üí∞",
                    color: "#FFD700",
                    commands: [
                        { name: "/wallet", desc: "Xem v√≠ ti·ªÅn" },
                        { name: "/give <@user> <amount>", desc: "Chuy·ªÉn coin cho ng∆∞·ªùi kh√°c" },
                        { name: "/donate", desc: "·ª¶ng h·ªô t√°c gi·∫£ ‚òï" },
                        { name: "wdaily", desc: "Nh·∫≠n th∆∞·ªüng h·∫±ng ng√†y" },
                    ]
                },
                shop: {
                    name: "Shop",
                    description: "Mua b√°n v·∫≠t ph·∫©m",
                    emoji: "üõí",
                    color: "#00CED1",
                    commands: [
                        { name: "wshop", desc: "Xem c·ª≠a h√†ng" },
                        { name: "wbuy <itemId> <s·ªë l∆∞·ª£ng>", desc: "Mua v·∫≠t ph·∫©m" },
                    ]
                },
                minigame: {
                    name: "Minigames",
                    description: "C√°c tr√≤ ch∆°i nh·ªè",
                    emoji: "üéÆ",
                    color: "#FF69B4",
                    commands: [
                        { name: "wbaucua <bet>", desc: "Ch∆°i B·∫ßu Cua" },
                        { name: "wkeoco <bet>", desc: "Ch∆°i K√©o C∆∞a" },
                        { name: "wjackpot <bet>", desc: "Jackpot (x√®ng m√°y)" },
                        { name: "wkeobuabao <bet>", desc: "K√©o B√∫a Bao" },
                        { name: "wbaicao <bet>", desc: "B√†i C√†o" },
                    ]
                },
                system: {
                    name: "C·∫•u h√¨nh & H·ªá th·ªëng",
                    description: "C√°c l·ªánh qu·∫£n l√Ω bot",
                    emoji: "‚öôÔ∏è",
                    color: "#808080",
                    commands: [
                        { name: "/set prefix <value>", desc: "ƒê·∫∑t prefix m·ªõi (Admin)" },
                        { name: "/about", desc: "Gi·ªõi thi·ªáu bot" },
                        { name: "/help", desc: "Xem h∆∞·ªõng d·∫´n" },
                    ]
                }
            };

            const groupArg = interaction.options.getString("group");

            if (!groupArg) {
                const embed = new EmbedBuilder()
                    .setTitle("üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Bot")
                    .setDescription("D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c nh√≥m l·ªánh c√≥ s·∫µn. S·ª≠ d·ª•ng `/help [t√™n nh√≥m]` ƒë·ªÉ xem chi ti·∫øt t·ª´ng nh√≥m.")
                    .setColor("#0099FF")
                    .setThumbnail(client.user.displayAvatarURL())
                    .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                    .setTimestamp();

                for (const key in commandGroups) {
                    const group = commandGroups[key];
                    embed.addFields({
                        name: `${group.emoji} ${group.name}`,
                        value: `${group.description}\n\`/help ${key}\``,
                        inline: true
                    });
                }
                embed.addFields({
                    name: `Join Our Support Server`,
                    value: `üëâ [Click here](https://discord.gg/kDkydXrtua) to join!`,
                    inline: false
                });

                return await interaction.editReply({ embeds: [embed] });
            }

            const groupKey = {
                ww: "werewolf",
                sl: "soulland",
                eco: "economy",
                shop: "shop",
                mini: "minigame",
                sys: "system"
            }[groupArg.toLowerCase()] || groupArg.toLowerCase();

            const group = commandGroups[groupKey];
            if (!group) {
                return await interaction.editReply({
                    content: "‚ùå Nh√≥m l·ªánh kh√¥ng t·ªìn t·∫°i! S·ª≠ d·ª•ng `/help` ƒë·ªÉ xem danh s√°ch nh√≥m l·ªánh."
                });
            }

            const embed = new EmbedBuilder()
                .setTitle(`${group.emoji} Nh√≥m l·ªánh: ${group.name}`)
                .setDescription(group.description)
                .setColor(group.color)
                .setFooter({ text: `<> = b·∫Øt bu·ªôc, [] = tu·ª≥ ch·ªçn ‚Ä¢ Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();

            group.commands.forEach(cmd => {
                embed.addFields({
                    name: `\`${cmd.name}\``,
                    value: cmd.desc,
                    inline: false
                });
            });
            embed.addFields({
                name: `Join Our Support Server`,
                value: `üëâ [Click here](https://discord.gg/kDkydXrtua) to join!`,
                inline: false
            });

            return await interaction.editReply({ embeds: [embed] });
        }

        case 'daily': {
            await interaction.deferReply();
            let userData = await UserController.getUserData(interaction.user.id);
            if (!userData) {
                userData = await UserController.createUser(interaction.user.id);
            }

            const cooldown = 1000 * 60 * 60 * 24;
            const reward = {
                coin: 100 + Math.floor(Math.random() * 50),
                exp: 50 + Math.floor(Math.random() * 30),
                bonus: Math.random() < 0.2
            };

            if (userData.lastDaily && Date.now() - userData.lastDaily.getTime() < cooldown) {
                const timeLeft = cooldown - (Date.now() - userData.lastDaily.getTime());
                const hours = Math.floor(timeLeft / (1000 * 60 * 60));
                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));

                const cooldownEmbed = new EmbedBuilder()
                    .setColor('#FF5555')
                    .setTitle('‚è∞ ƒê√£ nh·∫≠n Daily r·ªìi!')
                    .setDescription(`B·∫°n c·∫ßn ch·ªù th√™m **${hours}h ${minutes}m** n·ªØa ƒë·ªÉ nh·∫≠n daily ti·∫øp theo.`)
                    .addFields(
                        { name: '‚è∞ L·∫ßn cu·ªëi nh·∫≠n', value: `<t:${Math.floor(userData.lastDaily.getTime() / 1000)}:R>`, inline: true },
                        { name: 'üïí C√≤n l·∫°i', value: `${hours}h ${minutes}m`, inline: true }
                    )
                    .setFooter({ text: 'Daily reset m·ªói 24 gi·ªù' });

                return await interaction.editReply({ embeds: [cooldownEmbed] });
            }

            let totalCoin = reward.coin;
            let totalExp = reward.exp;
            let bonusText = '';

            if (reward.bonus) {
                const bonusCoin = Math.floor(totalCoin * 0.5);
                const bonusExp = Math.floor(totalExp * 0.5);
                totalCoin += bonusCoin;
                totalExp += bonusExp;
                bonusText = `üéÅ **Bonus:** +${bonusCoin} coin +${bonusExp} exp`;
            }

            userData.coin += totalCoin;
            userData.exp += totalExp;

            let levelUpText = '';
            let levelsGained = 0;
            const originalLevel = userData.lvl;

            while (userData.exp >= userData.lvl * 100) {
                const expNeeded = userData.lvl * 100;
                userData.exp -= expNeeded;
                userData.lvl += 1;
                levelsGained++;
            }

            if (levelsGained > 0) {
                if (levelsGained === 1) {
                    levelUpText = `üöÄ **Level Up!** Level ${originalLevel} ‚Üí **${userData.lvl}**`;
                } else {
                    levelUpText = `üöÄ **Level Up!** +${levelsGained} levels (${originalLevel} ‚Üí **${userData.lvl}**)`;
                }
            }

            const expToLevel = Number(userData.lvl) * Number(DEFAULT_EXP_LVL1) * Number(STEP_EXP);
            userData.lastDaily = new Date();
            await userData.save();

            const successEmbed = new EmbedBuilder()
                .setColor('#55FF55')
                .setTitle('üéâ Daily Reward')
                .setDescription('B·∫°n ƒë√£ nh·∫≠n daily th√†nh c√¥ng!')
                .addFields(
                    { name: 'üí∞ Coin nh·∫≠n ƒë∆∞·ª£c', value: `**${totalCoin}** coin`, inline: true },
                    { name: '‚≠ê EXP nh·∫≠n ƒë∆∞·ª£c', value: `**${totalExp}** exp`, inline: true },
                    { name: 'üìä Level hi·ªán t·∫°i', value: `**${userData.lvl}**`, inline: true },
                    { name: 'üéØ EXP hi·ªán t·∫°i', value: `**${userData.exp}/${expToLevel}**`, inline: true },
                    { name: 'üè¶ T·ªïng coin', value: `**${userData.coin.toLocaleString()}** coin`, inline: true }
                )
                .setFooter({ text: `Daily ti·∫øp theo: ${new Date(Date.now() + cooldown).toLocaleTimeString()}` });

            if (bonusText) {
                successEmbed.addFields({ name: 'üéÅ May m·∫Øn', value: bonusText, inline: false });
            }

            if (levelUpText) {
                successEmbed.addFields({ name: '‚ú® Th√†nh t·ª±u', value: levelUpText, inline: false });
            }

            return await interaction.editReply({ embeds: [successEmbed] });
        }

        case 'about': {
            await interaction.deferReply();
            const embed = new EmbedBuilder()
                .setTitle("ü§ñ About This Bot")
                .setDescription("This bot is a Discord game and utility bot created by **Hu·ª≥nh Trung Ki√™n**.")
                .setColor("Green")
                .addFields(
                    { name: "Version", value: "Beta_1.0.0", inline: true },
                    { name: "Developer", value: "Hu·ª≥nh Trung Ki√™n", inline: true },
                    { name: "Features", value: "‚Ä¢ Game rooms\n‚Ä¢ Voting system\n‚Ä¢ Wallet & money transfer\n‚Ä¢ Fun commands" },
                    { name: "Support", value: "Contact the developer if you encounter any bugs." }
                )
                .setFooter({ text: "Enjoy the bot and have fun! üéâ" });

            await interaction.editReply({ embeds: [embed] });
            return;
        }

        case 'start': {
            await interaction.deferReply();
            await GameController.handleStartGame(interactionToMessage(interaction), lang);
            return;
        }

        case 'wallet': {
            await interaction.deferReply();
            await UserController.handleBalance(interactionToMessage(interaction));
            return;
        }

        case 'donate': {
            await interaction.deferReply();
            await interaction.editReply({ content: "üîó Momo: 0827626203 \n Name: Hu·ª≥nh Trung Ki√™n" });
            return;
        }

        default: {
            await interaction.deferReply();
            await interaction.editReply({ content: "‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá." });
            return;
        }
    }
};
