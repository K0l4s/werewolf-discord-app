// handleInteractionCreate.js
const { DEFAULT_EXP_LVL1, STEP_EXP } = require('../config/constants');
const BattleController = require('../controllers/DauLaDaiLuc/battleController');
const SpiritController = require('../controllers/DauLaDaiLuc/spiritController');
const SpiritRingController = require('../controllers/DauLaDaiLuc/spiritRingController');
const GameController = require('../controllers/gameController');
const LanguageController = require('../controllers/languageController');
const MiniGameController = require('../controllers/miniGameController');
const SettingController = require('../controllers/settingController');
const UserController = require('../controllers/userController');
const SpiritMaster = require('../models/DauLaDaiLuc/SpiritMaster');
const Prefix = require('../models/Prefix');
const GameService = require('../services/gameService');
const { interactionToMessage } = require('../utils/fakeMessage');
const { EmbedBuilder } = require('discord.js');

module.exports = async (interaction, client) => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName } = interaction;
    let lang = await LanguageController.getLang(msg.guild.id)

    try {
        switch (commandName) {
            // case ''
            case 'spirit': {
                if (interaction.options.getSubcommand() === "list") {
                    try {
                        // L·∫•y s·ªë trang t·ª´ message (v√≠ d·ª•: "spirit 2")
                        const page = interaction.options.getString("pagenumber");;

                        const embed = await SpiritController.showAllSpirits(page);
                        return interaction.reply({ embeds: [embed] });
                    } catch (error) {
                        console.error('L·ªói khi hi·ªÉn th·ªã V≈© H·ªìn:', error);

                        const errorEmbed = new EmbedBuilder()
                            .setTitle('‚ùå L·ªói')
                            .setDescription('ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch V≈© H·ªìn!')
                            .setColor(0xFF0000);

                        return interaction.reply({ embeds: [errorEmbed] });
                    }
                } else if (interaction.options.getSubcommand() === "information") {
                    try {
                        const result = await SpiritController.getSpiritInfo(interaction.user.id);
                        interaction.reply(result);
                    } catch (error) {
                        // Fallback v·ªÅ simple info n·∫øu b·ªã l·ªói
                        const result = "L·ªói l·∫•y d·ªØ li·ªáu"
                        interaction.reply({ content: result });
                    }
                } else if (interaction.options.getSubcommand() === "ring") {
                    const userId = interaction.user.id;
                    const { embeds, components } = await SpiritRingController.getSpiritRingsEmbed(userId);

                    await interaction.reply({ embeds, components });
                }
            }
            case 'set': {
                if (interaction.options.getSubcommand() === "prefix") {
                    const newPrefix = interaction.options.getString("value");

                    await Prefix.findOneAndUpdate(
                        { guildId: interaction.guild.id },
                        { prefix: newPrefix },
                        { upsert: true }
                    );

                    await interaction.reply(`‚úÖ Prefix server ƒë√£ ƒë·ªïi th√†nh: \`${newPrefix}\``);
                    return;
                }
                else if (interaction.options.getSubcommand() === "notification") {
                    const channel = interaction.options.getChannel("channel");

                    // L·∫•y ID k√™nh
                    const channelId = channel.id;
                    await SettingController.setNoti(interaction, channelId)
                    return
                }
                break;
            }

            case 'awake': {
                const userId = interaction.user.id;
                console.log("ƒêang ti·∫øn h√†nh th·ª©c t·ªânh v√µ h·ªìn cho user:", userId);

                try {
                    const currentCount = await SpiritMaster.countDocuments({ userId });
                    console.log("S·ªë spirit hi·ªán t·∫°i:", currentCount);

                    const embed = await SpiritController.awakenRandomSpirit(userId);

                    if (typeof embed === 'string') {
                        await interaction.reply(embed);
                    } else if (embed && embed.data) {
                        await interaction.reply({ embeds: [embed] });
                    } else {
                        console.error("Embed kh√¥ng h·ª£p l·ªá:", embed);
                        await interaction.reply("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o embed!");
                    }
                } catch (error) {
                    console.error("L·ªói khi th·ª©c t·ªânh:", error);
                    await interaction.reply("‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª©c t·ªânh v≈© h·ªìn!");
                }
                return;
            }

            case 'spirit': {
                try {
                    const result = await SpiritController.getSpiritInfo(interaction.user.id);
                    await interaction.reply(result);
                } catch (error) {
                    await interaction.reply("‚ùå L·ªói l·∫•y d·ªØ li·ªáu!");
                }
                return;
            }

            case 'battle': {
                await BattleController.handleBattleCommand(interaction);
                return;
            }

            // case 'create': {
            //     await GameController.handleCreateRoom(interactionToMessage(interaction));
            //     return;
            // }

            case 'join': {
                await GameController.handleJoinCommand(interactionToMessage(interaction), lang);
                return;
            }

            case 'new': {
                const embed = await GameController.handleCreateNewRoom(interaction.channel.id, lang);
                await interaction.reply({ embeds: [embed] });
                return;
            }

            case 'give': {
                const mentionUser = interaction.options.getUser('user');
                const balance = interaction.options.getNumber('amount');
                const embed = new EmbedBuilder();

                if (!mentionUser) {
                    embed.setTitle("‚ùå Transfer Error!")
                        .setDescription(`You must mention receiver first!`)
                        .setColor('Red');
                    await interaction.reply({ embeds: [embed], ephemeral: true });
                    return;
                }

                if (mentionUser.id === interaction.user.id) {
                    embed.setTitle("‚ùå Transfer Error!")
                        .setDescription(`You can't send money to yourself!`)
                        .setColor('Red');
                    await interaction.reply({ embeds: [embed], ephemeral: true });
                    return;
                }

                await UserController.giveMoneyTo(
                    interactionToMessage(interaction),
                    mentionUser,
                    balance
                );
                return;
            }
            case 'baucua': {
                const balance = interaction.options.getNumber('amount');
                return await MiniGameController.bauCua(interaction.user.id, interactionToMessage(interaction), balance)
            }
            case 'help': {
                // const embed = new EmbedBuilder()
                //     .setTitle("üìú List of Commands")
                //     .setDescription("Here are the available commands you can use:")
                //     .setColor("Blue")
                //     .addFields(
                //         { name: "üßü‚Äç‚ôÇÔ∏è Werewolf Commands", value: "`/create`, `/join`, `/new`, `/start`" },
                //         { name: "üë§ User Commands", value: "`/give <user> <amount>`, `/wallet`" },
                //         { name: "üéÆ Minigames", value: "`/baucua`, `/jackpot`, `/keoco`, `/keobuabao`, `/baicao`" },
                //         { name: "‚ÑπÔ∏è Information", value: "`/help`, `/donate`, `/about`" }
                //     )
                //     .setFooter({ text: "Use commands wisely! üòé" });
                const { EmbedBuilder } = require('discord.js');

                const commandGroups = {
                    werewolf: {
                        name: "Werewolf",
                        description: "C√°c l·ªánh ch∆°i Ma S√≥i",
                        emoji: "üê∫",
                        color: "#8B4513", // M√†u n√¢u
                        commands: [
                            { name: "wnew / wn", desc: "T·∫°o ph√≤ng m·ªõi" },
                            { name: "wjoin / wj", desc: "Tham gia ph√≤ng" },
                            { name: "wstart / ws", desc: "B·∫Øt ƒë·∫ßu game" },
                        ]
                    },
                    soulland: {
                        name: "Soul Land",
                        description: "C√°c l·ªánh ƒê·∫•u La ƒê·∫°i L·ª•c",
                        emoji: "üåå",
                        color: "#9370DB", // M√†u t√≠m nh·∫°t
                        commands: [
                            { name: "/awake", desc: "Th·ª©c t·ªânh V≈© H·ªìn" },
                            { name: "/spirit list <page>", desc: "Xem danh s√°ch V≈© H·ªìn" },
                            { name: "/spirit information", desc: "Xem chi ti·∫øt V≈© H·ªìn" },
                            { name: "wspirit attach <spiritRef> <ringId>", desc: "Kh·∫£m H·ªìn Ho√†n" },
                            { name: "whunt", desc: "SƒÉn H·ªìn Th√∫ (c√≥ th·ªÉ nh·∫≠n H·ªìn Ho√†n)" },
                            { name: "wbattle <@user> ho·∫∑c /battle <@user>", desc: "Khi√™u chi·∫øn ng∆∞·ªùi kh√°c" },
                        ]
                    },
                    economy: {
                        name: "Kinh t·∫ø",
                        description: "C√°c l·ªánh li√™n quan ƒë·∫øn ti·ªÅn t·ªá",
                        emoji: "üí∞",
                        color: "#FFD700", // M√†u v√†ng
                        commands: [
                            { name: "/wallet", desc: "Xem v√≠ ti·ªÅn" },
                            { name: "/give <@user> <amount>", desc: "Chuy·ªÉn coin cho ng∆∞·ªùi kh√°c" },
                            { name: "/donate", desc: "·ª¶ng h·ªô t√°c gi·∫£ ‚òï" },
                            { name: "wdaily", desc: "Nh·∫≠n th∆∞·ªüng h·∫±ng ng√†y" },
                        ]
                    },
                    shop: {
                        name: "Shop",
                        description: "Mua b√°n v·∫≠t ph·∫©m",
                        emoji: "üõí",
                        color: "#00CED1", // M√†u xanh ng·ªçc
                        commands: [
                            { name: "wshop", desc: "Xem c·ª≠a h√†ng" },
                            { name: "wbuy <itemId> <s·ªë l∆∞·ª£ng>", desc: "Mua v·∫≠t ph·∫©m" },
                        ]
                    },
                    minigame: {
                        name: "Minigames",
                        description: "C√°c tr√≤ ch∆°i nh·ªè",
                        emoji: "üéÆ",
                        color: "#FF69B4", // M√†u h·ªìng
                        commands: [
                            { name: "wbaucua <bet>", desc: "Ch∆°i B·∫ßu Cua" },
                            { name: "wkeoco <bet>", desc: "Ch∆°i K√©o C∆∞a" },
                            { name: "wjackpot <bet>", desc: "Jackpot (x√®ng m√°y)" },
                            { name: "wkeobuabao <bet>", desc: "K√©o B√∫a Bao" },
                            { name: "wbaicao <bet>", desc: "B√†i C√†o" },
                        ]
                    },
                    system: {
                        name: "C·∫•u h√¨nh & H·ªá th·ªëng",
                        description: "C√°c l·ªánh qu·∫£n l√Ω bot",
                        emoji: "‚öôÔ∏è",
                        color: "#808080", // M√†u x√°m
                        commands: [
                            { name: "/set prefix <value>", desc: "ƒê·∫∑t prefix m·ªõi (Admin)" },
                            { name: "/about", desc: "Gi·ªõi thi·ªáu bot" },
                            { name: "/help", desc: "Xem h∆∞·ªõng d·∫´n" },
                        ]
                    }
                };

                const groupArg = interaction.options.getString("group");

                if (!groupArg) {
                    // Show all groups
                    const embed = new EmbedBuilder()
                        .setTitle("üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Bot")
                        .setDescription("D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c nh√≥m l·ªánh c√≥ s·∫µn. S·ª≠ d·ª•ng `/help [t√™n nh√≥m]` ƒë·ªÉ xem chi ti·∫øt t·ª´ng nh√≥m.")
                        .setColor("#0099FF")
                        .setThumbnail(client.user.displayAvatarURL())
                        .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                        .setTimestamp();

                    for (const key in commandGroups) {
                        const group = commandGroups[key];
                        embed.addFields({
                            name: `${group.emoji} ${group.name}`,
                            value: `${group.description}\n\`/help ${key}\``,
                            inline: true
                        });
                    }
                    embed.addFields({
                        name: `Join Our Support Server`,
                        value: `üëâ [Click here](https://discord.gg/kDkydXrtua) to join!`,
                        inline: false
                    })

                    return interaction.reply({ embeds: [embed] });
                }

                const groupKey = {
                    ww: "werewolf",
                    sl: "soulland",
                    eco: "economy",
                    shop: "shop",
                    mini: "minigame",
                    sys: "system"
                }[groupArg.toLowerCase()] || groupArg.toLowerCase();

                const group = commandGroups[groupKey];
                if (!group) {
                    return interaction.reply({
                        content: "‚ùå Nh√≥m l·ªánh kh√¥ng t·ªìn t·∫°i! S·ª≠ d·ª•ng `/help` ƒë·ªÉ xem danh s√°ch nh√≥m l·ªánh.",
                        ephemeral: true
                    });
                }

                const embed = new EmbedBuilder()
                    .setTitle(`${group.emoji} Nh√≥m l·ªánh: ${group.name}`)
                    .setDescription(group.description)
                    .setColor(group.color)
                    .setFooter({ text: `<> = b·∫Øt bu·ªôc, [] = tu·ª≥ ch·ªçn ‚Ä¢ Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                    .setTimestamp();

                group.commands.forEach(cmd => {
                    embed.addFields({
                        name: `\`${cmd.name}\``,
                        value: cmd.desc,
                        inline: false
                    });
                });
                embed.addFields({
                    name: `Join Our Support Server`,
                    value: `üëâ [Click here](https://discord.gg/kDkydXrtua) to join!`,
                    inline: false
                })
                await interaction.reply({ embeds: [embed] });
                return;
            }
            case 'daily': {

                const cooldown = 1000 * 60 * 60 * 24;
                const reward = {
                    coin: 100 + Math.floor(Math.random() * 50),
                    exp: 50 + Math.floor(Math.random() * 30),
                    bonus: Math.random() < 0.2
                };

                let userData = user;

                // Check cooldown
                if (userData.lastDaily && Date.now() - userData.lastDaily.getTime() < cooldown) {
                    const timeLeft = cooldown - (Date.now() - userData.lastDaily.getTime());
                    const hours = Math.floor(timeLeft / (1000 * 60 * 60));
                    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));

                    const cooldownEmbed = new EmbedBuilder()
                        .setColor('#FF5555')
                        .setTitle('‚è∞ ƒê√£ nh·∫≠n Daily r·ªìi!')
                        .setDescription(`B·∫°n c·∫ßn ch·ªù th√™m **${hours}h ${minutes}m** n·ªØa ƒë·ªÉ nh·∫≠n daily ti·∫øp theo.`)
                        .addFields(
                            { name: '‚è∞ L·∫ßn cu·ªëi nh·∫≠n', value: `<t:${Math.floor(userData.lastDaily.getTime() / 1000)}:R>`, inline: true },
                            { name: 'üïí C√≤n l·∫°i', value: `${hours}h ${minutes}m`, inline: true }
                        )
                        .setFooter({ text: 'Daily reset m·ªói 24 gi·ªù' });

                    return interaction.reply({ embeds: [cooldownEmbed] });
                }

                // T√≠nh to√°n reward
                let totalCoin = reward.coin;
                let totalExp = reward.exp;
                let bonusText = '';

                if (reward.bonus) {
                    const bonusCoin = Math.floor(totalCoin * 0.5);
                    const bonusExp = Math.floor(totalExp * 0.5);
                    totalCoin += bonusCoin;
                    totalExp += bonusExp;
                    bonusText = `üéÅ **Bonus:** +${bonusCoin} coin +${bonusExp} exp`;
                }

                // C·∫≠p nh·∫≠t d·ªØ li·ªáu
                userData.coin += totalCoin;
                userData.exp += totalExp;

                // Check level up
                let levelUpText = '';
                let levelsGained = 0;
                const originalLevel = userData.lvl;

                while (userData.exp >= userData.lvl * 100) {
                    const expNeeded = userData.lvl * 100;
                    userData.exp -= expNeeded;
                    userData.lvl += 1;
                    levelsGained++;
                }

                if (levelsGained > 0) {
                    if (levelsGained === 1) {
                        levelUpText = `üöÄ **Level Up!** Level ${originalLevel} ‚Üí **${userData.lvl}**`;
                    } else {
                        levelUpText = `üöÄ **Level Up!** +${levelsGained} levels (${originalLevel} ‚Üí **${userData.lvl}**)`;
                    }
                }
                const expToLevel = Number(user.lvl) * Number(DEFAULT_EXP_LVL1) * Number(STEP_EXP);

                userData.lastDaily = new Date();
                await userData.save();

                // T·∫°o embed th√†nh c√¥ng
                const successEmbed = new EmbedBuilder()
                    .setColor('#55FF55')
                    .setTitle('üéâ Daily Reward')
                    .setDescription('B·∫°n ƒë√£ nh·∫≠n daily th√†nh c√¥ng!')
                    .addFields(
                        { name: 'üí∞ Coin nh·∫≠n ƒë∆∞·ª£c', value: `**${totalCoin}** coin`, inline: true },
                        { name: '‚≠ê EXP nh·∫≠n ƒë∆∞·ª£c', value: `**${totalExp}** exp`, inline: true },
                        { name: 'üìä Level hi·ªán t·∫°i', value: `**${userData.lvl}**`, inline: true },
                        { name: 'üéØ EXP hi·ªán t·∫°i', value: `**${userData.exp}/${expToLevel}**`, inline: true },
                        { name: 'üè¶ T·ªïng coin', value: `**${userData.coin.toLocaleString()}** coin`, inline: true }
                    )
                    .setFooter({ text: `Daily ti·∫øp theo: ${new Date(Date.now() + cooldown).toLocaleTimeString()}` });

                // Th√™m bonus field n·∫øu c√≥
                if (bonusText) {
                    successEmbed.addFields({ name: 'üéÅ May m·∫Øn', value: bonusText, inline: false });
                }

                // Th√™m level up field n·∫øu c√≥
                if (levelUpText) {
                    successEmbed.addFields({ name: '‚ú® Th√†nh t·ª±u', value: levelUpText, inline: false });
                }

                return interaction.reply({ embeds: [successEmbed] });

            }
            case 'about': {
                const embed = new EmbedBuilder()
                    .setTitle("ü§ñ About This Bot")
                    .setDescription("This bot is a Discord game and utility bot created by **Hu·ª≥nh Trung Ki√™n**.")
                    .setColor("Green")
                    .addFields(
                        { name: "Version", value: "Beta_1.0.0", inline: true },
                        { name: "Developer", value: "Hu·ª≥nh Trung Ki√™n", inline: true },
                        { name: "Features", value: "‚Ä¢ Game rooms\n‚Ä¢ Voting system\n‚Ä¢ Wallet & money transfer\n‚Ä¢ Fun commands" },
                        { name: "Support", value: "Contact the developer if you encounter any bugs." }
                    )
                    .setFooter({ text: "Enjoy the bot and have fun! üéâ" });

                await interaction.reply({ embeds: [embed], ephemeral: true });
                return;
            }

            case 'start': {
                await GameController.handleStartGame(interactionToMessage(interaction), lang);
                return;
            }

            case 'wallet': {
                await UserController.handleBalance(interactionToMessage(interaction));
                return;
            }

            case 'donate': {
                await interaction.reply({ content: "üîó Momo: 0827626203 \n Name: Hu·ª≥nh Trung Ki√™n", ephemeral: true });
                return;
            }

            default: {
                await interaction.reply({ content: "‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá.", ephemeral: true });
                return;
            }
        }
    } catch (error) {
        console.error("‚ö†Ô∏è L·ªói interactionCreate:", error);

        // fallback: check n·∫øu ch∆∞a reply
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({ content: "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh!", ephemeral: true });
        } else {
            await interaction.followUp({ content: "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh!", ephemeral: true });
        }
    }
};
