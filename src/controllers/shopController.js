const { Embed, EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, StringSelectMenuBuilder } = require("discord.js");
const ItemService = require("../services/itemService");
const { wolfCoin, wolfIcon } = require("../utils/wolfCoin");
const UserService = require("../services/userService");
const InventoryService = require("../services/inventoryService");
const Inventory = require("../models/Inventory");
const { ITEM_RARITY, ITEM_TYPE } = require("../config/constants");
const { formatType, rarityIcons } = require("../utils/format");
class ShopController {
    static async getShopEmbed(page = 1, limit = 5, sortBy = 'name', sortOrder = 'asc', rarityFilter = 'all', typeFilter = 'all') {
        // L·∫•y d·ªØ li·ªáu items v·ªõi c√°c tham s·ªë l·ªçc v√† s·∫Øp x·∫øp
        const { items, totalItems, currentPage, totalPages } = await ItemService.getAllItems(
            page,
            limit,
            sortBy,
            sortOrder,
            rarityFilter,
            typeFilter
        );
        const rarityIcons = {
            "Common": "‚ù§Ô∏èÔ∏è",
            "Super Common": "üçÄ",
            "Rare": "üíé",
            "Super Rare": "üî•",
            "Epic": "üåå",
            "Super Epic": "‚öîÔ∏è",
            "Legendary": "üëë",
            "Super Legendary": "üåü",
            "Mythic": "üêâ",
            "Super Mythic": "üöÄ"
        };
        const embed = new EmbedBuilder()
            .setTitle("üõí Shop")
            .setColor("Blue");

        if (items.length === 0) {
            embed.setDescription("Hi·ªán t·∫°i shop ch∆∞a c√≥ item n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.");
        } else {
            // T·∫°o m√¥ t·∫£ v·ªõi th√¥ng tin v·ªÅ b·ªô l·ªçc v√† s·∫Øp x·∫øp hi·ªán t·∫°i
            let description = "Danh s√°ch items c√≥ s·∫µn:\n";

            // Hi·ªÉn th·ªã th√¥ng tin b·ªô l·ªçc
            if (rarityFilter !== 'all' || typeFilter !== 'all') {
                description += "**B·ªô l·ªçc:** ";
                if (rarityFilter !== 'all') description += `ƒê·ªô hi·∫øm: ${rarityFilter} `;
                if (typeFilter !== 'all') description += `Lo·∫°i: ${typeFilter} `;
                description += "\n";
            }

            // Hi·ªÉn th·ªã th√¥ng tin s·∫Øp x·∫øp
            const sortText = {
                name: 'T√™n',
                price: 'Gi√°',
                rarity: 'ƒê·ªô hi·∫øm'
            };
            description += `**S·∫Øp x·∫øp:** ${sortText[sortBy] || sortBy} (${sortOrder === 'asc' ? 'TƒÉng d·∫ßn' : 'Gi·∫£m d·∫ßn'})\n\n`;

            embed.setDescription(description);

            // Th√™m c√°c items v√†o embed
            // items.forEach((item) => {
            //     embed.addFields({
            //         name: `[${item.itemRef}]. ${item.icon} ${item.name}`,
            //         value: `üí∞ Gi√°: ${wolfCoin(item.price)} | üìñ ${item.description || "Kh√¥ng c√≥ m√¥ t·∫£"} | üé≤ ƒê·ªô hi·∫øm: ${rarityIcons[item.rarity] || '‚ùî'} ${item.rarity}`
            //     });
            // });
            items.forEach((item, index) => {
                const itemNumber = (currentPage - 1) * limit + index + 1;
                const rarityIcon = rarityIcons[item.rarity] || '‚ùî';

                embed.addFields({
                    name: `[${itemNumber}] ${item.itemRef} | ${item.icon} ${item.name} | ${wolfCoin(item.price)} | ${rarityIcon} ${item.rarity}`,
                    value: `üìñ ${item.description || "Kh√¥ng c√≥ m√¥ t·∫£"}`,
                    inline: false
                });
            });
        }

        embed.setFooter({ text: `Trang ${currentPage}/${totalPages} | T·ªïng items: ${totalItems} | S·ª≠ d·ª•ng /buy [itemRef] ƒë·ªÉ mua` });

        // T·∫°o n√∫t ph√¢n trang
        const prevPageButton = new ButtonBuilder()
            .setCustomId(`shop_prev_${currentPage - 1}_${sortBy}_${sortOrder}_${rarityFilter}_${typeFilter}`)
            .setLabel("‚¨ÖÔ∏è Tr∆∞·ªõc")
            .setStyle(ButtonStyle.Primary)
            .setDisabled(currentPage <= 1);

        const nextPageButton = new ButtonBuilder()
            .setCustomId(`shop_next_${currentPage + 1}_${sortBy}_${sortOrder}_${rarityFilter}_${typeFilter}`)
            .setLabel("Ti·∫øp ‚û°Ô∏è")
            .setStyle(ButtonStyle.Primary)
            .setDisabled(currentPage >= totalPages);
        // ITEM_RARITY:{
        //         C:'Common',
        //         SM: 'Super Common',
        //         R: 'Rare',
        //         SR: 'Super Rare',
        //         E: 'Epic',
        //         SE: 'Super Epic',
        //         L: 'Legendary',
        //         SL: 'Super Legendary',
        //         MY: 'Mythic',
        //         SMY: 'Super Mythic'
        //     },
        // T·∫°o dropdown l·ªçc theo ƒë·ªô hi·∫øm

        const raritySelect = new StringSelectMenuBuilder()
            .setCustomId('shop_rarity_filter')
            .setPlaceholder('L·ªçc theo ƒë·ªô hi·∫øm')
            .addOptions([
                {
                    label: 'T·∫•t c·∫£ ƒë·ªô hi·∫øm',
                    value: 'all',
                    default: rarityFilter === 'all'
                },
                ...Object.values(ITEM_RARITY).map(rarity => ({
                    label: `
                    ${rarityIcons[rarity] || '‚ùî'}
                    ${rarity}`,
                    value: rarity,
                    default: rarityFilter === rarity
                }))
            ]);

        // T·∫°o dropdown l·ªçc theo lo·∫°i item
        const typeSelect = new StringSelectMenuBuilder()
            .setCustomId('shop_type_filter')
            .setPlaceholder('L·ªçc theo lo·∫°i')
            .addOptions([
                {
                    label: 'T·∫•t c·∫£ lo·∫°i',
                    value: 'all',
                    default: typeFilter === 'all'
                },
                ...Object.values(ITEM_TYPE).map(type => ({
                    label: `${type === ITEM_TYPE.PET_FOOD ? "üêæ" :
                        type === ITEM_TYPE.PRESENT_BOX ? "üéÅ" : "üõçÔ∏è"
                        } ${formatType(type)}`,
                    value: type,
                    default: typeFilter === type
                }))
            ]);

        // T·∫°o dropdown s·∫Øp x·∫øp
        const sortSelect = new StringSelectMenuBuilder()
            .setCustomId('shop_sort')
            .setPlaceholder('S·∫Øp x·∫øp theo')
            .addOptions([
                {
                    label: 'T√™n (A-Z)',
                    value: 'name_asc',
                    default: sortBy === 'name' && sortOrder === 'asc'
                },
                {
                    label: 'T√™n (Z-A)',
                    value: 'name_desc',
                    default: sortBy === 'name' && sortOrder === 'desc'
                },
                {
                    label: 'Gi√° (Th·∫•p-Cao)',
                    value: 'price_asc',
                    default: sortBy === 'price' && sortOrder === 'asc'
                },
                {
                    label: 'Gi√° (Cao-Th·∫•p)',
                    value: 'price_desc',
                    default: sortBy === 'price' && sortOrder === 'desc'
                },
                {
                    label: 'ƒê·ªô hi·∫øm (Th·∫•p-Cao)',
                    value: 'rarity_asc',
                    default: sortBy === 'rarity' && sortOrder === 'asc'
                },
                {
                    label: 'ƒê·ªô hi·∫øm (Cao-Th·∫•p)',
                    value: 'rarity_desc',
                    default: sortBy === 'rarity' && sortOrder === 'desc'
                }
            ]);

        // T·∫°o n√∫t reset b·ªô l·ªçc
        // const resetFilterButton = new ButtonBuilder()
        //     .setCustomId('shop_reset_filters')
        //     .setLabel('üîÑ Reset B·ªô L·ªçc')
        //     .setStyle(ButtonStyle.Secondary)
        //     .setDisabled(rarityFilter === 'all' && typeFilter === 'all' && sortBy === 'name' && sortOrder === 'asc');

        // T·∫°o c√°c h√†ng component
        const paginationRow = new ActionRowBuilder()
            .addComponents(prevPageButton, nextPageButton);

        const filterRow = new ActionRowBuilder()
            .addComponents(raritySelect);

        const typeRow = new ActionRowBuilder()
            .addComponents(typeSelect);

        const sortRow = new ActionRowBuilder()
            .addComponents(sortSelect);

        // const resetRow = new ActionRowBuilder()
        //     .addComponents(resetFilterButton);

        return {
            embeds: [embed],
            components: [filterRow, typeRow, sortRow, paginationRow]
        };
    }
    // static async getShopEmbed(page = 1, limit = 5) {
    //     const { items, totalItems, currentPage, totalPages } = await ItemService.getAllItems(page, limit);

    //     const embed = new EmbedBuilder()
    //         .setTitle("üõí Shop")
    //         .setColor("Blue");

    //     if (items.length === 0) {
    //         embed.setDescription("Hi·ªán t·∫°i shop ch∆∞a c√≥ item n√†o.");
    //     } else {
    //         // N·∫øu c√≥ items nh∆∞ng kh√¥ng mu·ªën description ch√≠nh, v·∫´n set m√¥ t·∫£ ng·∫Øn
    //         embed.setDescription("Danh s√°ch items c√≥ s·∫µn: ");
    //         items.forEach((item) => {
    //             embed.addFields({
    //                 name: `[${item.itemRef}]. ${item.icon} ${item.name}`,
    //                 value: `üí∞ Gi√°: ${wolfCoin(item.price)}\nüìñ ${item.description || "Kh√¥ng c√≥ m√¥ t·∫£"}`
    //             });
    //         });
    //     }

    //     embed.setFooter({ text: `Trang ${currentPage}/${totalPages} | Items tr√™n trang: ${totalItems}` });

    //     const prevPageButton = new ButtonBuilder()
    //         .setCustomId(`shop_prev_${currentPage - 1}`)
    //         .setLabel("‚¨ÖÔ∏è Tr∆∞·ªõc")
    //         .setStyle(ButtonStyle.Primary)
    //         .setDisabled(currentPage <= 1);

    //     const nextPageButton = new ButtonBuilder()
    //         .setCustomId(`shop_next_${currentPage + 1}`)
    //         .setLabel("Ti·∫øp ‚û°Ô∏è")
    //         .setStyle(ButtonStyle.Primary)
    //         .setDisabled(currentPage >= totalPages);

    //     const row = new ActionRowBuilder()
    //         .addComponents(prevPageButton, nextPageButton);

    //     return { embeds: [embed], components: [row] }; // ph·∫£i l√† embeds: [embed]

    // }
    static async buyItem(userId, itemRef, quantity) {
        try {
            const user = await UserService.findUserById(userId);
            const item = await ItemService.getItemByRef(itemRef);

            if (!item) {
                return `Don't find any item with ref: ${itemRef}!`;
            }

            const userCoin = Number(user.coin);
            const totalItemsPrice = Number(item.price) * Number(quantity);

            if (userCoin < totalItemsPrice) {
                return `You don't have enough ${wolfIcon()}`;
            }

            // Tr·ª´ coin
            user.coin -= totalItemsPrice;
            await user.save();

            // S·ª≠ d·ª•ng findOneAndUpdate v·ªõi upsert ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã l·ªói
            const inv = await Inventory.findOneAndUpdate(
                {
                    userId: userId,
                    item: item._id
                },
                {
                    $inc: { quantity: quantity }
                },
                {
                    upsert: true, // T·∫°o m·ªõi n·∫øu kh√¥ng t·ªìn t·∫°i
                    new: true, // Tr·∫£ v·ªÅ document sau khi update
                    setDefaultsOnInsert: true
                }
            ).populate('item'); // Populate ƒë·ªÉ l·∫•y th√¥ng tin item

            const embed = new EmbedBuilder();
            embed.setTitle(`‚úÖ Success!`)
                .setDescription(`You bought ${quantity} x ${item.icon} ${item.name} (${wolfCoin(item.price)}) = ${wolfCoin(totalItemsPrice)} \nYou have: ${inv.quantity} ${item.icon} ${item.name} now`)
                .setFooter({ text: "@Werewolf Shop" })
                .setTimestamp()
                .setColor(0x00FF00);

            return { embeds: [embed] };

        } catch (error) {
            console.error('Error in buyItem:', error);
            return `An error occurred while purchasing the item.`;
        }
    }
}
module.exports = ShopController;