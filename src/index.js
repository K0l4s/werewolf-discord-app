require('dotenv').config();
const express = require('express');
const { Client, GatewayIntentBits, Partials, Events, ActivityType, PermissionsBitField, ChannelType } = require('discord.js');
const connectDB = require('./config/database');
const { handleMessageCreate } = require('./events/messageCreate');
const SettingController = require('./controllers/settingController');
const { cleanupTempImages } = require('./utils/drawImage');
const routes = require('./routes');
const app = express();
const port = process.env.PORT || 3000;
const cors = require('cors');
const cookieParser = require("cookie-parser");
const { setupDailyStreakCheck } = require('./jobs/dailyStreakCheck');
const StreakController = require('./controllers/streakController');
const NotificationController = require('./controllers/notificationController');
const handleMenu = require('./events/handleMenu');
const GiveawayHandlers = require('./events/giveAwayHandlers');
app.use(cookieParser());

// Discord client setup
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.DirectMessageReactions,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildVoiceStates,
    ],
    partials: [Partials.Channel, Partials.Message, Partials.Reaction, Partials.User]
});

// Middleware
app.use(express.json());
// Middleware
app.use(express.json());

// Cho ph√©p t·∫•t c·∫£ origin
app.use(cors());

app.use(cors({
    origin: process.env.FE_URL || 'http://localhost:5173',
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    credentials: true
}));
// Make Discord client accessible in routes
app.set('discordClient', client);

// Import routes
app.use('/', routes);
app.use(cookieParser());
async function startServer() {
    try {
        // Connect DB and cleanup
        connectDB();
        cleanupTempImages();

        // Start Express server
        app.listen(port, "0.0.0.0", () => {
            console.log(`üöÄ Express server ch·∫°y tr√™n http://0.0.0.0:${port}`);
        });

        // Discord bot events
        client.once('ready', () => {
            console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: ${client.user.tag}`);
            console.log(`üìä Bot ƒëang ·ªü ${client.guilds.cache.size} server`);
            client.user.setPresence({
                status: "online",
                activities: [
                    {
                        name: "using w instead splash command if bug!!!",
                        type: ActivityType.Playing
                    }
                ]
            });
        });
        setupDailyStreakCheck();
        client.on('messageCreate', (msg) => GiveawayHandlers.handleMessageCreate(client, msg));
        // client.on('interactionCreate', (interaction) => GiveawayHandlers.handleButtonInteraction(interaction));
        client.on('guildMemberAdd', async (member) => {
            console.log("add");

            await SettingController.sendNotification(member.guild.id, 'welcome', member, client);
        });

        // S·ª± ki·ªán th√†nh vi√™n r·ªùi ƒëi
        client.on('guildMemberRemove', async (member) => {
            console.log("remove");
            await SettingController.sendNotification(member.guild.id, 'goodbye', member, client);
        });

        // S·ª± ki·ªán boost server
        client.on('guildMemberUpdate', async (oldMember, newMember) => {
            if (!oldMember.premiumSince && newMember.premiumSince) {
                await SettingController.sendNotification(newMember.guild.id, 'booster', newMember, client, true);
            }
        });
        client.on('voiceStateUpdate', async (oldState, newState) => {
            // Ch·ªâ x·ª≠ l√Ω khi user join voice channel
            await StreakController.streakAnoucement(client, oldState, newState);
        });

        client.on('voiceStateUpdate', async (oldState, newState) => {
            // Only handle if channel changed
            await NotificationController.changeRoomAnnouncement(client, oldState, newState);
        });
        client.on('messageCreate', async (message) => {
            try {
                await handleMessageCreate(client, message);
            } catch (error) {
                console.error("‚ö†Ô∏è L·ªói interactionCreate:", error);

                // G·ª≠i b√°o c√°o bug t·ªõi dev
                const devUser = await client.users.fetch(process.env.DEVELOPER_ID);
                if (devUser) {
                    await devUser.send({ content: formatMessageError(message, error) });
                }
                try {
                    await message.author.send(
                        `Error message: \n\`\`\`${error.message}\`\`\`\n` +
                        `‚ùå Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.\n` +
                        `ƒê·ªôi ng≈© dev ƒë√£ ƒë∆∞·ª£c b√°o c√°o, vui l√≤ng th·ª≠ l·∫°i sau.\n` +
                        `‚û°Ô∏è ƒê·ªÉ ƒë·∫©y nhanh ti·∫øn ƒë·ªô s·ª≠a l·ªói, h√£y tham gia server Discord c·ªßa ch√∫ng t√¥i!\n\n` +
                        `**KI·ªÇM TRA L·∫†I QUY·ªÄN C·ª¶A BOT TRONG SERVER/ CHANNEL!**` +
                        `‚ùå Sorry, it's some bug when you use our bot.\n` +
                        `The dev team were notified, please try again.\n` +
                        `‚û°Ô∏è Please join our Discord for more information!` +
                        `**CHECK THE BOT‚ÄôS PERMISSIONS IN THE SERVER/CHANNEL!**`
                    );
                } catch (dmError) {
                    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i DM t·ªõi user ${message.author.tag}:`, dmError);
                }
            }
        });
        function formatMessageError(message, error) {
            const user = message.author;
            const guild = message.guild;
            const channel = message.channel;

            let details =
                `üêû **B√°o c√°o l·ªói Message**\n` +
                `**User:** ${user.tag} (${user.id})\n` +
                `**User Avatar:** ${user.displayAvatarURL({ dynamic: true })}\n` +
                `**Server:** ${guild?.name || "DM"}\n` +
                `**Server ID:** ${guild?.id || "N/A"}\n` +
                `**Channel:** ${channel?.name || "DM"}\n` +
                `**Channel ID:** ${channel?.id || "N/A"}\n` +
                `**Message Content:** ${message.content || "No content"}\n`;

            if (guild && channel) {
                details += `**Message Link:** https://discord.com/channels/${guild.id}/${channel.id}/${message.id}\n`;
            }

            details += `**Time:** ${new Date().toISOString()}\n`;
            details += `**Error:**\n\`\`\`${error.stack}\`\`\``;

            return details;
        }

        client.on('messageReactionAdd', async (reaction, user) => {
            if (user.bot) return;
            // N·∫øu message ch∆∞a cache th√¨ fetch
            if (reaction.partial) {
                try {
                    await reaction.fetch();
                } catch (err) {
                    console.error("Can't fetch reaction:", err);
                    return;
                }
            }
        })
        client.on('interactionCreate', async (interaction) => {
            try {
                if (interaction.isCommand() || interaction.isChatInputCommand()) {
                    return await require('./events/handleInteractionCreate')(interaction, client);
                } else if (interaction.isStringSelectMenu() || interaction.isSelectMenu()) {
                    return await require('./events/handleInteractionSelectCreate')(interaction);
                } else if (interaction.isButton()) {
                    return await require('./events/handleButtonInteraction')(interaction);
                }
            } catch (error) {
                console.error("‚ö†Ô∏è L·ªói interactionCreate:", error);

                // G·ª≠i b√°o c√°o bug t·ªõi dev
                const devUser = await client.users.fetch(process.env.DEVELOPER_ID);
                if (devUser) {
                    await devUser.send({ content: formatInteractionError(interaction, error) });
                }
                try {
                    await interaction.user.send(
                        `Error message: \n\`\`\`${error.message}\`\`\`\n` +
                        `‚ùå Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.\n` +
                        `ƒê·ªôi ng≈© dev ƒë√£ ƒë∆∞·ª£c b√°o c√°o, vui l√≤ng th·ª≠ l·∫°i sau.\n` +
                        `‚û°Ô∏è ƒê·ªÉ ƒë·∫©y nhanh ti·∫øn ƒë·ªô s·ª≠a l·ªói, h√£y tham gia server Discord c·ªßa ch√∫ng t√¥i!\n\n` +
                        `**KI·ªÇM TRA L·∫†I QUY·ªÄN BOT TRONG SERVER/CHANNEL!**` +
                        `‚ùå Sorry, it's some bug when you use our bot.\n` +
                        `The dev team were notified, please try again.\n` +
                        `‚û°Ô∏è Please join our Discord for more information!` +
                        `**CHECK THE BOT‚ÄôS PERMISSIONS IN THE SERVER/CHANNEL!**`
                    );

                    // Optional: th√¥ng b√°o nh·∫π trong k√™nh r·∫±ng user ƒë√£ ƒë∆∞·ª£c g·ª≠i DM
                    if (!interaction.replied) {
                        await interaction.reply({
                            content: "üì© M√¨nh ƒë√£ g·ª≠i chi ti·∫øt l·ªói cho b·∫°n qua DM.",
                            ephemeral: true
                        });
                    }
                } catch (dmError) {
                    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i DM t·ªõi user ${interaction.user.tag}:`, dmError);

                    // N·∫øu kh√¥ng g·ª≠i DM ƒë∆∞·ª£c (user t·∫Øt DM), b√°o tr·ª±c ti·∫øp
                    if (!interaction.replied) {
                        await interaction.reply({
                            content: "‚ùå Kh√¥ng th·ªÉ g·ª≠i DM cho b·∫°n. Vui l√≤ng b·∫≠t tin nh·∫Øn ri√™ng ho·∫∑c th·ª≠ l·∫°i sau.",
                            ephemeral: true
                        });
                    } else {
                        await interaction.followUp({
                            content: "‚ùå Kh√¥ng th·ªÉ g·ª≠i DM cho b·∫°n. Vui l√≤ng b·∫≠t tin nh·∫Øn ri√™ng ho·∫∑c th·ª≠ l·∫°i sau.",
                            ephemeral: true
                        });
                    }
                }

            }
        });
        function formatInteractionError(interaction, error) {
            const user = interaction.user;
            const guild = interaction.guild;
            const channel = interaction.channel;

            let details =
                `üêû **B√°o c√°o l·ªói Interaction**\n` +
                `**User:** ${user.tag} (${user.id})\n` +
                `**User Avatar:** ${user.displayAvatarURL({ dynamic: true })}\n` +
                `**Server:** ${guild?.name || "DM"}\n` +
                `**Server ID:** ${guild?.id || "N/A"}\n` +
                `**Channel:** ${channel?.name || "DM"}\n` +
                `**Channel ID:** ${channel?.id || "N/A"}\n`;

            if (interaction.isChatInputCommand()) {
                details += `**Command:** /${interaction.commandName}\n`;
                const options = interaction.options.data.map(o => `${o.name}: ${o.value}`).join(", ");
                details += `**Options:** ${options || "None"}\n`;
            } else if (interaction.isButton()) {
                details += `**Button ID:** ${interaction.customId}\n`;
                if (interaction.message) {
                    details += `**Message Link:** https://discord.com/channels/${guild?.id}/${channel?.id}/${interaction.message.id}\n`;
                    details += `**Message Content:** ${interaction.message.content || "No content"}\n`;
                }
            } else if (interaction.isStringSelectMenu()) {
                details += `**Select Menu ID:** ${interaction.customId}\n`;
                details += `**Values:** ${interaction.values.join(", ")}\n`;
            } else if (interaction.isUserContextMenuCommand()) {
                details += `**User Context Menu:** ${interaction.commandName}\n`;
            } else if (interaction.isMessageContextMenuCommand()) {
                details += `**Message Context Menu:** ${interaction.commandName}\n`;
            } else {
                details += `**Interaction Type:** ${interaction.type}\n`;
            }

            details += `**Time:** ${new Date().toISOString()}\n`;
            details += `**Error:**\n\`\`\`${error.stack}\`\`\``;

            return details;
        }
        // X·ª≠ l√Ω interactions
        client.on('interactionCreate', async (interaction) => {
            await handleMenu.handleMenuInteraction(interaction);
        });
        client.on(Events.GuildCreate, async (guild) => {
            try {
                const developer = await client.users.fetch(process.env.DEVELOPER_ID);

                if (developer) {
                    await developer.send(
                        `‚úÖ Bot v·ª´a ƒë∆∞·ª£c add v√†o server m·ªõi!\n\n**T√™n server:** ${guild.name}\nüë• **Th√†nh vi√™n:** ${guild.memberCount}\nüÜî **Server ID:** ${guild.id}`
                    );
                }

                // Ki·ªÉm tra quy·ªÅn c·ªßa bot trong server
                const botMember = guild.members.me;
                if (!botMember.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    // T√¨m k√™nh m·∫∑c ƒë·ªãnh (system channel) ho·∫∑c k√™nh ƒë·∫ßu ti√™n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn
                    const defaultChannel = guild.systemChannel ||
                        guild.channels.cache.find(channel =>
                            channel.type === ChannelType.GuildText &&
                            channel.permissionsFor(botMember).has(PermissionsBitField.Flags.SendMessages)
                        );

                    if (defaultChannel) {
                        await defaultChannel.send(
                            `‚ö†Ô∏è **C·∫£nh b√°o quan tr·ªçng!**\n\n` +
                            `T√¥i c·∫ßn quy·ªÅn **Qu·∫£n tr·ªã vi√™n (Administrator)** ƒë·ªÉ ho·∫°t ƒë·ªông ƒë·∫ßy ƒë·ªß.\n` +
                            `Vui l√≤ng c·∫•p quy·ªÅn Administrator cho t√¥i trong c√†i ƒë·∫∑t vai tr√≤ (roles) c·ªßa server.\n` +
                            `N·∫øu kh√¥ng, m·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ch√≠nh x√°c.` +
                            `========English========` +
                            `‚ö†Ô∏è **Important Warning!**\n\n` +
                            `I need Administrator permission to function properly.\n` +
                            `Please grant me the Administrator role in your server settings. \n` +
                            `Without it, some features may not work correctly. \n`
                        );
                    }

                    // G·ª≠i th√¥ng b√°o cho developer
                    if (developer) {
                        await developer.send(
                            `‚ö†Ô∏è Bot ƒë∆∞·ª£c th√™m v√†o server **${guild.name}** nh∆∞ng **KH√îNG C√ì** quy·ªÅn Administrator!\n` +
                            `Server ID: ${guild.id}`
                        );
                    }
                } else {
                    // N·∫øu bot c√≥ quy·ªÅn admin, th√¥ng b√°o th√†nh c√¥ng
                    const defaultChannel = guild.systemChannel ||
                        guild.channels.cache.find(channel =>
                            channel.type === ChannelType.GuildText &&
                            channel.permissionsFor(botMember).has(PermissionsBitField.Flags.SendMessages)
                        );

                    if (defaultChannel) {
                        await defaultChannel.send(
                            `üëã Xin ch√†o! C·∫£m ∆°n b·∫°n ƒë√£ m·ªùi t√¥i v√†o server!\n` +
                            `‚úÖ T√¥i ƒë√£ c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng \`whelp\` ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn.` +
                            `üëã Hello! Thanks for add me!\n` +
                            `‚úÖ Allready done. Use \`whelp\` to view our command.`
                        );
                    }
                }

            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω s·ª± ki·ªán GuildCreate:", error);
            }
        });
        client.on(Events.GuildDelete, async (guild) => {
            try {
                const developer = await client.users.fetch(process.env.DEVELOPER_ID);

                if (developer) {
                    await developer.send(
                        `‚ùå Bot v·ª´a b·ªã xo√° kh·ªèi server!\n\n**T√™n server:** ${guild.name}\nüÜî **Server ID:** ${guild.id}`
                    );
                }
            } catch (error) {
                console.error("Kh√¥ng th·ªÉ g·ª≠i DM cho developer:", error);
            }
        });



        // Error handling
        process.on('unhandledRejection', (reason) => {
            console.error('‚ö†Ô∏è Unhandled Rejection:', reason);
        });
        process.on('uncaughtException', (err) => {
            console.error('üí• Uncaught Exception:', err);
        });

        // Login Discord bot
        await client.login(process.env.DISCORD_TOKEN);

    } catch (error) {
        console.error('L·ªói kh·ªüi ch·∫°y:', error);
        process.exit(1);
    }
}

startServer();
module.exports = { app, client };
