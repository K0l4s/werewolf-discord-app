const Inventory = require("../models/Inventory");
const Pet = require("../models/Pet");
const Item = require("../models/Item")
const ServerPet = require("../models/ServerPet");
const ItemService = require("./itemService");
const { ITEM_TYPE } = require("../config/constants");
const FoodBuff = require("../models/FoodBuff");

class PetService {
    static async getServerPet(guildId) {
        try {
            let serverPet = await ServerPet.findOne({ guildId }).populate('pet');

            if (!serverPet) {
                return null;
            }

            // T√≠nh to√°n l·∫°i stats
            const now = new Date();

            // T√≠nh to√°n ƒë·ªô ƒë√≥i d·ª±a tr√™n lastFed
            const lastFed = new Date(serverPet.lastFed);
            const minutesSinceLastFed = Math.floor((now - lastFed) / (1000 * 60));
            const hungerDecrease = Math.floor(minutesSinceLastFed / 15); // M·ªói 15 ph√∫t gi·∫£m 1 ƒë·ªô ƒë√≥i
            serverPet.hunger = Math.max(0, serverPet.hunger - hungerDecrease);

            // T√≠nh to√°n ƒë·ªô vui v·∫ª d·ª±a tr√™n lastPlayed
            const lastPlayed = new Date(serverPet.lastPlayed);
            const minutesSinceLastPlayed = Math.floor((now - lastPlayed) / (1000 * 60));
            const happinessDecrease = Math.floor(minutesSinceLastPlayed / 10); // M·ªói 10 ph√∫t gi·∫£m 1 ƒë·ªô vui v·∫ª
            serverPet.happiness = Math.max(0, serverPet.happiness - happinessDecrease);

            // C·∫≠p nh·∫≠t th·ªùi gian cu·ªëi c√πng n·∫øu c√≥ thay ƒë·ªïi
            if (hungerDecrease > 0 || happinessDecrease > 0) {
                await ServerPet.findByIdAndUpdate(serverPet._id, {
                    hunger: serverPet.hunger,
                    happiness: serverPet.happiness,
                    lastFed: hungerDecrease > 0 ? now : serverPet.lastFed,
                    lastPlayed: happinessDecrease > 0 ? now : serverPet.lastPlayed
                });
            }

            return serverPet;
        } catch (error) {
            console.error('Error getting server pet:', error);
            return null;
        }
    }
    static async createServerPet(guildId) {
        const existing = await ServerPet.findOne({ guildId });
        if (existing) throw new Error("Server pet **already exists**");

        try {
            // L·∫•y t·∫•t c·∫£ pet c√≥ s·∫µn (kh√¥ng y√™u c·∫ßu pet tr∆∞·ªõc)
            const availablePets = await Pet.find({
                prevPetRequirement: { $in: [null, undefined] }
            });

            if (availablePets.length === 0) {
                throw new Error("Kh√¥ng c√≥ pet n√†o kh·∫£ d·ª•ng trong database");
            }

            // Ch·ªçn ng·∫´u nhi√™n m·ªôt pet
            const randomIndex = Math.floor(Math.random() * availablePets.length);
            const randomPet = availablePets[randomIndex];

            // T·∫°o t√™n ng·∫´u nhi√™n th√∫ v·ªã d·ª±a tr√™n type
            const petNames = {
                'Dog': ['Buddy', 'Max', 'Charlie', 'Cooper', 'Rocky'],
                'Cat': ['Luna', 'Bella', 'Kitty', 'Lucy', 'Nala'],
                'Dragon': ['Draco', 'Smaug', 'Toothless', 'Spyro', 'Drogon'],
                'Rabbit': ['Bunny', 'Thumper', 'Coco', 'Oreo', 'Snowball']
            };

            const defaultName = randomPet.type in petNames
                ? petNames[randomPet.type][Math.floor(Math.random() * petNames[randomPet.type].length)]
                : randomPet.type;

            // T·∫°o server pet m·ªõi
            const serverPet = new ServerPet({
                guildId,
                pet: randomPet._id,
                name: defaultName,
                hunger: randomPet.hungerStats || 100,
                happiness: randomPet.happinessStats || 100
            });

            await serverPet.save();

            // Populate th√¥ng tin pet
            const populatedServerPet = await ServerPet.findById(serverPet._id)
                .populate('pet');

            console.log(`‚úÖ Created server pet for guild ${guildId}: ${populatedServerPet.name} (${populatedServerPet.pet.type})`);

            return populatedServerPet;

        } catch (error) {
            console.error('Error creating server pet:', error);
            throw new Error(`Kh√¥ng th·ªÉ t·∫°o server pet: ${error.message}`);
        }
    }
    // admin create new pet
    static async createPet(petType = "random") {
        // Danh s√°ch c√°c lo·∫°i pet m·∫´u
        const petTemplates = {
            dog: {
                image: "https://media.baamboozle.com/uploads/images/107124/1599414911_113526",
                lvlRequirement: 100,
                hungerStats: 20,
                happinessStats: 20,
                price: 500,
                type: "Dog",
                luckyBoost: 5,
                prevPetRequirement: null
            },
            cat: {
                image: "https://assets.dochipo.com/editor/animations/cat/7f35e703-ad26-45cd-8f4f-62da09bb22e4.gif",
                lvlRequirement: 150,
                hungerStats: 25,
                happinessStats: 18,
                price: 700,
                type: "Cat",
                luckyBoost: 7,
                prevPetRequirement: null
            },
            dragon: {
                image: "https://giffiles.alphacoders.com/247/24723.gif",
                lvlRequirement: 300,
                hungerStats: 30,
                happinessStats: 15,
                price: 1500,
                type: "Dragon",
                luckyBoost: 15,
                prevPetRequirement: null
            },
            rabbit: {
                image: "https://media4.giphy.com/media/v1.Y2lkPTZjMDliOTUyMGx6cjRqY3lzamE2aWsyZDBoOXgwOHB4cWh5eXdxaDVxZHgxMjd4eCZlcD12MV9zdGlja2Vyc19zZWFyY2gmY3Q9cw/AaJsk7LhSjM3uiPLyd/giphy.gif",
                lvlRequirement: 80,
                hungerStats: 15,
                happinessStats: 25,
                price: 300,
                type: "Rabbit",
                luckyBoost: 3,
                prevPetRequirement: null
            }
        };

        // Ch·ªçn pet template
        let petData;
        if (petType === "random") {
            // Ch·ªçn ng·∫´u nhi√™n m·ªôt pet
            const types = Object.keys(petTemplates);
            const randomType = types[Math.floor(Math.random() * types.length)];
            petData = petTemplates[randomType];
        } else if (petTemplates[petType.toLowerCase()]) {
            // Ch·ªçn pet c·ª• th·ªÉ
            petData = petTemplates[petType.toLowerCase()];
        } else {
            // M·∫∑c ƒë·ªãnh l√† dog n·∫øu type kh√¥ng h·ª£p l·ªá
            petData = petTemplates.dog;
        }

        try {
            const pet = new Pet(petData);
            await pet.save();

            console.log(`‚úÖ ƒê√£ t·∫°o pet ${pet.type} th√†nh c√¥ng!`);
            console.log(`üìä ID: ${pet._id}`);
            console.log(`üé≤ Lucky Boost: ${pet.luckyBoost}`);
            console.log(`üí∞ Price: ${pet.price}`);

            return pet;
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o pet:", error);
            throw new Error("Kh√¥ng th·ªÉ t·∫°o pet");
        }
    }

    static async feedPet(guildId, itemRef, userId) {
        try {
            // L·∫•y th√¥ng tin server pet
            const serverPet = await ServerPet.findOne({ guildId }).populate('pet');
            if (!serverPet) {
                throw new Error("Server ch∆∞a c√≥ pet n√†o!");
            }

            // Ki·ªÉm tra item c√≥ t·ªìn t·∫°i v√† l√† pet food kh√¥ng
            // const item = await Item.findById(itemId).populate('foodBuff');
            const item = await ItemService.getItemByRef(itemRef)
            if (!item) {
                throw new Error("V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i!");
            }

            if (item.type !== ITEM_TYPE.PET_FOOD) {
                throw new Error("V·∫≠t ph·∫©m n√†y kh√¥ng ph·∫£i l√† th·ª©c ƒÉn cho pet!");
            }
            // console.log(item)
            // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ item n√†y v√† s·ªë l∆∞·ª£ng ƒë·ªß kh√¥ng
            const userItem = await Inventory.findOne({ userId, item: item._id });
            // console.log(userItem)
            if (!userItem || userItem.quantity < 1) {
                throw new Error("B·∫°n kh√¥ng c√≥ v·∫≠t ph·∫©m n√†y trong t√∫i ƒë·ªì!");
            }

            // Ki·ªÉm tra food buff
            // if (!item.foodBuff) {
            //     throw new Error("V·∫≠t ph·∫©m n√†y kh√¥ng c√≥ hi·ªáu ·ª©ng!");
            // }

            // const foodBuff = item.foodBuff || 0;
            // const createFood = await FoodBuff.create({
            //     item:item._id,
            //     petExpEarn:20,
            //     hungerBuff:20,
            //     happinessBuff:20,
            //     luckyBuff:20
            // })
            // console.log(createFood)
            const foodBuff = await FoodBuff.findOne({ item: item._id })
            console.log(foodBuff)
            if (!foodBuff)
                throw new Error("Can't found effect! Can't feed this food")
            // T√≠nh to√°n stats m·ªõi
            let newHunger = Math.min(serverPet.pet.hungerStats, serverPet.hunger + foodBuff.hungerBuff);
            // if (newHunger > serverPet.pet.hungerStats)
            //     newHunger = serverPet.pet.hungerStats
            const newHappiness = Math.min(serverPet.pet.hungerStats, serverPet.happiness + foodBuff.happinessBuff);
            // if (newHappiness > serverPet.pet.happinessStats)
            //     newHunger = serverPet.pet.happinessStats
            const newExp = serverPet.exp + (foodBuff.petExpEarn || 0);

            // Ki·ªÉm tra level up
            let newLevel = serverPet.lvl;
            let remainingExp = newExp;
            const expRequired = serverPet.pet.expStats * newLevel;

            if (newExp >= expRequired) {
                newLevel += 1;
                remainingExp = newExp - expRequired;
                // C√≥ th·ªÉ th√™m logic th√¥ng b√°o level up ·ªü ƒë√¢y
            }

            // C·∫≠p nh·∫≠t server pet
            const updatedPet = await ServerPet.findByIdAndUpdate(
                serverPet._id,
                {
                    hunger: newHunger,
                    happiness: newHappiness,
                    exp: remainingExp,
                    lvl: newLevel,
                    lastFed: new Date()
                },
                { new: true }
            ).populate('pet');

            // Gi·∫£m s·ªë l∆∞·ª£ng item trong inventory
            if (userItem.quantity === 1) {
                // N·∫øu ch·ªâ c√≤n 1 th√¨ x√≥a lu√¥n document
                await Inventory.findByIdAndDelete(userItem._id);
            } else {
                // Ng∆∞·ª£c l·∫°i gi·∫£m s·ªë l∆∞·ª£ng
                await Inventory.findByIdAndUpdate(
                    userItem._id,
                    { $inc: { quantity: -1 } }
                );
            }

            return {
                success: true,
                pet: updatedPet,
                foodBuff: foodBuff,
                levelUp: newLevel > serverPet.lvl,
                oldLevel: serverPet.lvl,
                newLevel: newLevel,
                itemUsed: item
            };

        } catch (error) {
            console.error('Error feeding pet:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = PetService;